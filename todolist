import json
import tkinter as tk
from tkinter import messagebox, ttk
from datetime import datetime

# File to store tasks
TASKS_FILE = "tasks.json"

# Load tasks safely
def load_tasks():
    try:
        with open(TASKS_FILE, "r") as file:
            tasks = json.load(file)
            for task in tasks:
                if "priority" not in task:
                    task["priority"] = "Medium"  # Default priority
                if "deadline" not in task:
                    task["deadline"] = "None"  # Default deadline
            return tasks
    except FileNotFoundError:
        return []

# Save tasks
def save_tasks(tasks):
    with open(TASKS_FILE, "w") as file:
        json.dump(tasks, file, indent=4)

# Add task
def add_task():
    task = task_entry.get().strip()
    priority = priority_var.get()
    deadline = deadline_entry.get().strip()

    if task:
        tasks.append({"task": task, "completed": False, "priority": priority, "deadline": deadline})
        save_tasks(tasks)
        update_task_lists()
        task_entry.delete(0, tk.END)
        deadline_entry.delete(0, tk.END)
    else:
        messagebox.showwarning("Warning", "Task cannot be empty!")

# Remove task
def remove_task():
    selected = task_list.selection()
    if selected:
        index = int(selected[0])
        tasks.pop(index)
        save_tasks(tasks)
        update_task_lists()
    else:
        messagebox.showwarning("Warning", "No task selected!")

# Toggle completion
def toggle_completion(event):
    selected = task_list.selection()
    if selected:
        index = int(selected[0])
        tasks[index]["completed"] = not tasks[index]["completed"]
        save_tasks(tasks)
        update_task_lists()

# View completed tasks
def view_completed_tasks():
    completed_tasks_window = tk.Toplevel(root)
    completed_tasks_window.title("Completed Tasks")
    completed_tasks_window.geometry("350x300")

    completed_list = ttk.Treeview(completed_tasks_window, columns=("Task", "Priority", "Deadline"), show="headings", height=10)
    completed_list.heading("Task", text="Completed Task")
    completed_list.heading("Priority", text="Priority")
    completed_list.heading("Deadline", text="Deadline")
    completed_list.pack(pady=10)

    for task in tasks:
        if task["completed"]:
            completed_list.insert("", "end", values=(task["task"], task["priority"], task["deadline"]))

# Update task lists
def update_task_lists():
    task_list.delete(*task_list.get_children())
    for idx, task in enumerate(tasks):
        if not task["completed"]:
            task_list.insert("", "end", iid=idx, values=(task["task"], task["priority"], task["deadline"]))

# Toggle dark mode
def toggle_dark_mode():
    if dark_mode_var.get():
        root.configure(bg="black")
        style.configure("Treeview", background="gray20", foreground="white")
    else:
        root.configure(bg="white")
        style.configure("Treeview", background="white", foreground="black")

# Initialize UI
root = tk.Tk()
root.title("Bug-Free To-Do List")
root.geometry("500x500")

tasks = load_tasks()

style = ttk.Style()
style.configure("Treeview.Heading", font=("Arial", 10, "bold"))

frame = tk.Frame(root)
frame.pack(pady=10)

task_entry = tk.Entry(frame, width=30)
task_entry.pack(side="left", padx=5)

priority_var = ttk.Combobox(frame, values=["High", "Medium", "Low"], width=7)
priority_var.set("Medium")
priority_var.pack(side="left", padx=5)

deadline_entry = tk.Entry(frame, width=12)
deadline_entry.insert(0, "YYYY-MM-DD")
deadline_entry.pack(side="left", padx=5)

add_button = tk.Button(frame, text="Add Task", command=add_task)
add_button.pack(side="left")

task_list = ttk.Treeview(root, columns=("Task", "Priority", "Deadline"), show="headings", height=15)
task_list.heading("Task", text="Task")
task_list.heading("Priority", text="Priority")
task_list.heading("Deadline", text="Deadline")
task_list.pack(pady=10)
task_list.bind("<Double-1>", toggle_completion)

remove_button = tk.Button(root, text="Remove Task", command=remove_task)
remove_button.pack()

completed_button = tk.Button(root, text="View Completed Tasks", command=view_completed_tasks)
completed_button.pack()

dark_mode_var = tk.BooleanVar()
dark_mode_toggle = tk.Checkbutton(root, text="Dark Mode", variable=dark_mode_var, command=toggle_dark_mode)
dark_mode_toggle.pack()

update_task_lists()
root.mainloop()