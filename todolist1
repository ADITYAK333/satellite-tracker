# Minimalist CLI-based To-Do app with simulated input
# Features: Add, View, Delete, Mark Done, Filter, JSON persistence

import json
import os
from datetime import datetime

TASKS_FILE = 'tasks.json'

# Simulated input for demo/testing
SIMULATED_INPUTS = iter([
    '4', 'Test Task 1', 'High', '2025-06-15',
    '4', 'Test Task 2', 'Low', '',
    '1',
    '5', '1',
    '2',
    '6', '2',
    '1',
    '7'
])

def simulated_input(prompt=''):
    try:
        print(prompt)
        val = next(SIMULATED_INPUTS)
        print(val)
        return val
    except StopIteration:
        print("No more simulated input. Exiting.")
        exit()

def load_tasks():
    if os.path.exists(TASKS_FILE):
        try:
            with open(TASKS_FILE, 'r') as f:
                return json.load(f)
        except json.JSONDecodeError:
            pass
    return []

def save_tasks(tasks):
    with open(TASKS_FILE, 'w') as f:
        json.dump(tasks, f, indent=4)

def print_task(task, index):
    status = "✓" if task.get('done') else "✗"
    print(f"{index + 1}. {status} {task['task']} (Priority: {task.get('priority', 'Medium')}, Due: {task.get('due', 'N/A')})")

def view_tasks(tasks, filter_option="All"):
    print("\nYour Tasks:")
    for i, task in enumerate(tasks):
        if filter_option == "Done" and not task.get('done'):
            continue
        if filter_option == "Pending" and task.get('done'):
            continue
        print_task(task, i)

def add_task(tasks):
    task_text = simulated_input("Enter task description:").strip()
    if not task_text:
        print("Task cannot be empty.")
        return

    priority = simulated_input("Enter priority (Low, Medium, High):").strip().title()
    if priority not in ["Low", "Medium", "High"]:
        priority = "Medium"

    due = simulated_input("Enter due date (YYYY-MM-DD) or leave blank:").strip()
    try:
        if due:
            datetime.strptime(due, "%Y-%m-%d")
        else:
            due = "N/A"
    except ValueError:
        print("Invalid date format. Setting due to N/A.")
        due = "N/A"

    tasks.append({
        'task': task_text,
        'done': False,
        'priority': priority,
        'due': due
    })
    save_tasks(tasks)
    print("Task added successfully.")

def mark_done(tasks):
    view_tasks(tasks, "Pending")
    try:
        task_no = int(simulated_input("Enter task number to mark done:"))
        if 1 <= task_no <= len(tasks):
            tasks[task_no - 1]['done'] = True
            save_tasks(tasks)
            print("Task marked as done.")
        else:
            print("Invalid task number.")
    except ValueError:
        print("Please enter a valid number.")

def delete_task(tasks):
    view_tasks(tasks)
    try:
        task_no = int(simulated_input("Enter task number to delete:"))
        if 1 <= task_no <= len(tasks):
            deleted = tasks.pop(task_no - 1)
            save_tasks(tasks)
            print(f"Deleted task: {deleted['task']}")
        else:
            print("Invalid task number.")
    except ValueError:
        print("Please enter a valid number.")

def main():
    tasks = load_tasks()
    while True:
        print("\nTo-Do List Menu:")
        print("1. View All Tasks")
        print("2. View Completed Tasks")
        print("3. View Pending Tasks")
        print("4. Add Task")
        print("5. Mark Task as Done")
        print("6. Delete Task")
        print("7. Exit")

        choice = simulated_input("Choose an option (1-7):").strip()

        if choice == '1':
            view_tasks(tasks, "All")
        elif choice == '2':
            view_tasks(tasks, "Done")
        elif choice == '3':
            view_tasks(tasks, "Pending")
        elif choice == '4':
            add_task(tasks)
        elif choice == '5':
            mark_done(tasks)
        elif choice == '6':
            delete_task(tasks)
        elif choice == '7':
            print("Exiting. Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == '__main__':
    main()
