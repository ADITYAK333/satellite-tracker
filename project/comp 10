import tkinter as tk
from tkinter import messagebox
import mysql.connector

# Database connection function
def connect_db():
    return mysql.connector.connect(
        host="localhost", user="root", password="", database="real_estate_db"
    )

# Add property to database
def add_property():
    if not all([entry_name.get(), entry_location.get(), entry_price.get(), entry_size.get()]):
        messagebox.showwarning("Error", "All fields are required!")
        return
    try:
        conn = connect_db()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO properties (property_name, location, price, size) VALUES (%s, %s, %s, %s)",
                       (entry_name.get(), entry_location.get(), float(entry_price.get()), int(entry_size.get())))
        conn.commit()
        messagebox.showinfo("Success", "Property added!")
        display_properties()
    except Exception as e:
        messagebox.showerror("Error", str(e))
    finally:
        conn.close()

# Delete property by ID
def delete_property():
    if not delete_id_entry.get():
        messagebox.showwarning("Error", "Enter a Property ID!")
        return
    try:
        conn = connect_db()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM properties WHERE id = %s", (delete_id_entry.get(),))
        conn.commit()
        messagebox.showinfo("Success", "Property deleted!" if cursor.rowcount else "Property not found.")
        display_properties()
    except Exception as e:
        messagebox.showerror("Error", str(e))
    finally:
        conn.close()

# Search properties based on filters
def search_properties():
    query = "SELECT * FROM properties WHERE 1=1"
    params = []
    if search_name.get():
        query += " AND property_name LIKE %s"
        params.append(f"%{search_name.get()}%")
    if search_location.get():
        query += " AND location LIKE %s"
        params.append(f"%{search_location.get()}%")
    if search_min_price.get():
        query += " AND price >= %s"
        params.append(float(search_min_price.get()))
    if search_max_price.get():
        query += " AND price <= %s"
        params.append(float(search_max_price.get()))
    if search_min_size.get():
        query += " AND size >= %s"
        params.append(int(search_min_size.get()))
    if search_max_size.get():
        query += " AND size <= %s"
        params.append(int(search_max_size.get()))
    display_properties(query, params)

# Display properties
def display_properties(query="SELECT * FROM properties LIMIT 100", params=()):
    listbox.delete(0, tk.END)
    try:
        conn = connect_db()
        cursor = conn.cursor()
        cursor.execute(query, params)
        for row in cursor.fetchall():
            listbox.insert(tk.END, f"ID: {row[0]} | {row[1]}, {row[2]}, ${row[3]}, {row[4]} sqft")
    except Exception as e:
        messagebox.showerror("Error", str(e))
    finally:
        conn.close()

# Clear input fields
def clear_inputs():
    for widget in [entry_name, entry_location, entry_price, entry_size, delete_id_entry, search_name, search_location, search_min_price, search_max_price, search_min_size, search_max_size]:
        widget.delete(0, tk.END)

# GUI Setup
root = tk.Tk()
root.title("Real Estate Management")
root.geometry("700x500")

# Form to add new property
tk.Label(root, text="Property Name").grid(row=0, column=0); entry_name = tk.Entry(root); entry_name.grid(row=0, column=1)
tk.Label(root, text="Location").grid(row=0, column=2); entry_location = tk.Entry(root); entry_location.grid(row=0, column=3)
tk.Label(root, text="Price").grid(row=1, column=0); entry_price = tk.Entry(root); entry_price.grid(row=1, column=1)
tk.Label(root, text="Size (sq ft)").grid(row=1, column=2); entry_size = tk.Entry(root); entry_size.grid(row=1, column=3)
tk.Button(root, text="Add Property", command=add_property).grid(row=2, column=0, columnspan=2)
tk.Button(root, text="Clear", command=clear_inputs).grid(row=2, column=2, columnspan=2)

# Form to delete a property
tk.Label(root, text="Delete Property ID").grid(row=3, column=0); delete_id_entry = tk.Entry(root); delete_id_entry.grid(row=3, column=1)
tk.Button(root, text="Delete Property", command=delete_property).grid(row=3, column=2)

# Search form
tk.Label(root, text="Search Property Name").grid(row=4, column=0); search_name = tk.Entry(root); search_name.grid(row=4, column=1)
tk.Label(root, text="Location").grid(row=4, column=2); search_location = tk.Entry(root); search_location.grid(row=4, column=3)
tk.Label(root, text="Min Price").grid(row=5, column=0); search_min_price = tk.Entry(root); search_min_price.grid(row=5, column=1)
tk.Label(root, text="Max Price").grid(row=5, column=2); search_max_price = tk.Entry(root); search_max_price.grid(row=5, column=3)
tk.Label(root, text="Min Size").grid(row=6, column=0); search_min_size = tk.Entry(root); search_min_size.grid(row=6, column=1)
tk.Label(root, text="Max Size").grid(row=6, column=2); search_max_size = tk.Entry(root); search_max_size.grid(row=6, column=3)
tk.Button(root, text="Search", command=search_properties).grid(row=7, column=0, columnspan=2)
tk.Button(root, text="Clear Filters", command=clear_inputs).grid(row=7, column=2, columnspan=2)

# Listbox to display properties
listbox = tk.Listbox(root, height=10, width=80)
listbox.grid(row=8, column=0, columnspan=4)

# Initial display
display_properties()

root.mainloop()
